Kit de desenvolvimento java
Para desenvolver java, precisamos desse kit
Oracle é a empresa que está por trás do Java
Buscamos o Java pela oracle

JRE - Executa as aplicações java
JDK - Java Development Kit é um conjunto de ferramentas e bibliotecas
de software que permite o desenvolvimento de aplicativos Java.

Versões LTS da JDK, são as que tem mais tempo de suporte, então damos preferencia
na utilização dela

IDE - Editor para desenvolver JAVA - IntelliJ
facilita na criação e utilização de códigos para JAVA

Build system - referesse a compilação do projeto e gerenciamentos de bibliotecas
famosos são o Maven e Gradle

O projeto deve ter uma versão jdk em que irá rodar. é comum ter várias versões da JDK
na máquina.

pasta src - source - costuma ter o código fonte do projeto com as classes do mesmo
e alguns outros arquivos

Main - É a classe principal do java, onde ele inicia o projeto

alt + 1 fecha a perspectiva da estrutura do projeto

System.out.println(""); printa no console.

sempre vou ter um método e dentro desse método terei minhas instruções

JVM - Java Virtual Machine
interpreta o bity code que é compilado pelo compilador java
através do código de alto nivél que fazemos
dessa forma, a jvm tem a função de pegar o nosso código
que foi escrito e transformado em byte code e fazer
o sistema operacional entender
a pasta out, possui o bytecode(.class)
a jvm entende o .class que é gerado através do nosso .java
e a jvm faz o sistema operacional entender

Variáveis
permite eu armazenar e trabalhar com tipos diferentes de valores
para declarar variaveis no java, preciso sempre informar qual o
tipo da variável
temos os tipos primitivos de variáveis
que guardão valores, o int por exermplo, guarda valores inteiros
int ano = 2022;, por exemplo
podemos declarar de duas formas
int ano = 2022;
ou
int ano;
ano = 2022;
temos outros tipos primitivos como o boolean
que armazena true ou false
double que armazena números flutuantes, com virgula, núemros
decimais
um int não consegue armazenar um valor com virgula
mas um double consegue armazenar um inteiro

Convenção de código
variáveis sempre são iniciadas com letras minúsculas
classes são declaradas e iniciadas com letras maiúsculas
palacras compostas, são declaradas no formato comelcase
exemplo: nomeDoFilme;

Concatenação
podemos contatenar textos com variaveis através do +
exemplo: sout("Ano de lançamento: " + anoDeLancamento);

No Java temos diversos tipos de operadores para lidar com os dados que estamos trabalhando em nossa aplicação. Vou detalhar melhor alguns deles aqui, que já mencionei nos vídeos:

Operadores de atribuição:

Os operadores de atribuição são usados para atribuir um valor a uma variável. O operador de atribuição básico é o "=" (sinal de igual). Por exemplo:

int valor =  5;  //Atribui o valor 5 à variável valor  COPIAR CÓDIGO
Existem também operadores de atribuição combinados, que são uma forma abreviada de atribuição. Por exemplo, o operador "+=" adiciona um valor à variável existente. Assim:

int valor =  10; 
valor += 15;  //Equivalente a valor = valor + 15, atribui o valor 15 à variável valor COPIAR CÓDIGO
Operadores aritméticos:

Os operadores aritméticos são usados para realizar operações matemáticas básicas. São eles:

"+" (adição)
"-" (subtração)
"*" (multiplicação)
"/" (divisão)
"%" (resto da divisão)
Por exemplo:

int a = 10 + 5; // Atribui o valor 15 à variável a
int b = 10 - 5; // Atribui o valor 5 à variável b
int c = 10 * 5; // Atribui o valor 50 à variável c
int d = 10 / 5; // Atribui o valor 2 à variável d
int e = 10 % 3; // Atribui o valor 1 à variável e (o resto da divisão de 10 por 3 é 1)
COPIAR CÓDIGO
Operadores relacionais:

Os operadores relacionais são usados para comparar valores. Eles retornam um valor booleano (verdadeiro ou falso). Trabalharemos melhor com eles quando tivermos na aula de condicionais, onde vamos modificar o fluxo da aplicação dada alguma condição. São eles:

"==" (igual a)
"!=" (diferente de)
">" (maior que)
">=" (maior ou igual a)
"<" (menor que)
"<=" (menor ou igual a)
Exemplo:

int a = 10; // Atribui o valor 10 à variável a
int b = 5; // Atribui o valor 5 à variável b
int c = 30; // Atribui o valor 30 à variável c

boolean igual = (b == a); //Nesse caso a variável igual ficará com o valor *false*, pois o valor de b não é igual o valor de a.
boolean diferente = (b != c); //A variável diferente ficará com o valor *true*, pois o valor de b é diferente do valor de c.
boolean maior = (b > a); //A variável maior ficará com o valor *false*, pois o valor de b é menor que o valor de a.
boolean menorIgual = (b <= c); //A variável menorIgual ficará com o valor *true*, pois o valor de b é menor que o valor de c.
COPIAR CÓDIGO
Operadores lógicos:

Esses operadores são usados quando queremos verificar duas ou mais condições e/ou expressões na aplicação. Eles fazem a comparação de valores booleanos e retornam também um resultado booleano.

São três operadores: AND (&&), OR (||) e NOT (!).

O operador AND (&&), que traduzindo para o português seria o E, é usado para verificar se duas condições são verdadeiras. Se ambas as condições forem verdadeiras, o resultado será verdadeiro. Caso contrário, o resultado será falso. Aqui está um exemplo:

boolean a = true;
boolean b = false;
if (a && b) {
   // Este código não será executado, já que a é verdadeiro e b é falso.
}COPIAR CÓDIGO
O operador OR (||), que traduzindo para o português seria o OU, é usado para verificar se pelo menos uma das condições é verdadeira. Se pelo menos uma das condições for verdadeira, o resultado será verdadeiro. Caso contrário, o resultado será falso. Aqui está um exemplo:

boolean a = true;
boolean b = false;
if (a || b) {
   // Este código será executado, já que a é verdadeiro, mesmo que b seja falso.
}COPIAR CÓDIGO
O operador NOT (!) é usado para negar uma condição. Se a condição for verdadeira, o resultado será falso. Se a condição for falsa, o resultado será verdadeiro. Aqui está um exemplo:

boolean a = true;
if (!a) {
   // Este código não será executado, já que a é verdadeiro.
}COPIAR CÓDIGO
Operadores de incremento:

Além dos operadores citados anteriormente, o operador de incremento é usado para aumentar o valor de uma variável em 1. Existem dois tipos de operadores de incremento: o operador de pré-incremento (++variavel) e o operador de pós-incremento (variavel++).

O operador de pré-incremento (++variavel) aumenta o valor da variável em 1 antes de usar a variável em uma expressão. Aqui está um exemplo:

int num = 5;
int resultado = ++num; //num é incrementado para 6 e depois atribuído a resultado
System.out.println(num); // imprime 6
System.out.println(resultado); // imprime 6
COPIAR CÓDIGO
Já o operador de pós-incremento (variavel++) aumenta o valor da variável em 1 depois de usar a variável em uma expressão. Aqui está um exemplo:

int num = 5;
int resultado = num++; //num é atribuído primeiramente à variável resultado e depois incrementado para 6
System.out.println(num); // imprime 6
System.out.println(resultado); // imprime 5
COPIAR CÓDIGO

A convenção de código do Java é um conjunto de regras recomendadas para escrever código Java que é fácil de ler, entender e manter. Essas regras foram definidas pela Oracle, a empresa que mantém a linguagem Java, e são amplamente seguidas pela comunidade de desenvolvedores Java.

Aqui estão algumas das principais convenções de código do Java:

Nomes de classes devem começar com letra maiúscula e usar a convenção PascalCase (também conhecida como Upper CamelCase).

Exemplo: MinhaClasse.
Nomes de métodos devem começar com letra minúscula e usar a convenção camelCase.

Exemplo: meuMetodo().
Nomes de constantes devem ser totalmente em letras maiúsculas, separadas por underline.

Exemplo: MINHA_CONSTANTE.
Nomes de variáveis devem começar com letra minúscula e usar a convenção camelCase.

Exemplo: minhaVariavel.
Todas as linhas de código devem ter no máximo 80 caracteres de largura para facilitar a leitura.

Recomenda-se usar espaços em branco para separar operadores, palavras-chave e elementos de controle de fluxo.

Exemplo: if (condicao) {.
Use comentários para documentar seu código, explicando o que ele faz e por que ele faz isso. Comentários devem ser claros e concisos.